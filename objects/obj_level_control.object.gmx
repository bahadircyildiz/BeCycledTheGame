<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_block</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Level controller
sprite_index = spr_match_items;
size = sprite_get_width(sprite_index);
image_speed = 0;  // stop image_index nedlessly cycling

// Ensure x and y are positioned correctly
move_snap(size,size);
window_set_cursor(cr_arrow);
blink = false;
// Playfield size - See documentation for details
across = 11;    // items across from the controller
down = 7;       // items down from the controller

/* Music control */
if(audio_is_playing(snd_menu)) {
  // Allow menu music to fade before stopping it
  alarm[1] = 3*room_speed;
}
audio_stop_sound(snd_level1);
audio_stop_sound(snd_level2);
audio_stop_sound(snd_level3);
audio_stop_sound(snd_level4);
audio_stop_sound(snd_level5);
// Fade in level music
if(!audio_is_playing(snd_level1) || !audio_is_playing(snd_level2) || !audio_is_playing(snd_level3) || !audio_is_playing(snd_level4) || !audio_is_playing(snd_level5 )) {
    switch (global.level){
    case 1: audio_sound_gain(snd_level1,0,0);
            audio_play_sound(snd_level1,0,true);
            audio_sound_gain(snd_level1,1,3000); break;
    case 2: audio_sound_gain(snd_level2,0,0);
            audio_play_sound(snd_level2,0,true);
            audio_sound_gain(snd_level2,1,3000); break;
    case 3: audio_sound_gain(snd_level3,0,0);
            audio_play_sound(snd_level3,0,true);
            audio_sound_gain(snd_level3,10,3000); break;
    case 4: audio_sound_gain(snd_level4,0,0);
            audio_play_sound(snd_level4,0,true);
            audio_sound_gain(snd_level4,10,3000); break;
    case 5: audio_sound_gain(snd_level5,0,0);
            audio_play_sound(snd_level5,0,true);
            audio_sound_gain(snd_level5,10,3000); break;;
    default:audio_sound_gain(snd_level1,0,0);
            audio_play_sound(snd_level1,0,true);
            audio_sound_gain(snd_level1,1,3000); break;
}
  
}

/* reset number of colors left counters */
for(i=0; i&lt;sprite_get_number(sprite_index); i+=1){
  global.item[i] = 0;
}

/* Reset default variables for this level */
randomize();              // reset random number generator seed.
global.moves = 0;         // total moves this level
global.incorrect = 0;     // Reset incorrect moves counter
global.far = true;        // Prevent selection until setup.
global.bonus = 0;         // score bonus
global.moving = 1;        // items moving flag
global.setup = false;     // items set up indicatore (ready to play or not)
global.clicked = noone;   // Contains last clicked item
global.level_score = 0;   // Individual level score

extra = 6;                // Number of extra items above each column
last_bonus = 0;           // last bonus score attained
matches = 0;              // Number of matching gems
finished = false;         // level complete flag
msg = -1;                 // Used by asyncronous messages
left = 0;                 // Number of items left on the playfield.
total_items = 180;        // total (default) items to match

/* create block bottom objects (column shifters) */
for(i=0; i&lt;across; i++){
  instance_create(x+(i*size),y+(down*size),obj_block_bottom);
}

/*  create block top objects above (item spawners) */
extra = min(4+(global.level*2),12);  // cap the number of extra items
for(i=0; i&lt;across; i++){
  with (instance_create(x+(i*size),y-size,obj_block_top)){
    // pass it the number of extra items it has
    extra = other.extra;
  }
}

/* Display instructions or get ready countdown message */
total_items = (across*down)+(extra*across);
if(global.level == 1){
  with (instance_create(0,0,obj_message)){
    msg_txt = "!onergeler##Komsu copleri 3 lu siralar halinde birlestirerek yoket.#
    Seviye "+string(global.level)+"#Cop cesidi "+string((global.item_max-global.item_min)+1);
    btn_txt = "Basla";
    target_room = -1;
    image_index = 1; // Opaque background
  }
}else{
  with (instance_create(0,0,obj_message)){
    // display a timed message
    msg_txt = "Seviye "+string(global.level)+"##Cop Cesidi: "+string(global.item_max-global.item_min+1);
    msg_txt +=" Toplam cop sayisi: "+string(other.total_items)+"##Hazir ol!!!";
    image_index = 1; // Opaque background
    target_room = -1;
    delay = 5; // seconds delay time
  }
}

// Timer code
time_max = (total_items*room_speed);
timer = time_max;
// Level setup complete
switch (global.level){
    case 1: background_index[0] = bg_1; break;
    case 2: background_index[0] = bg_2; break;
    case 3: background_index[0] = bg_3; break;
    case 4: background_index[0] = bg_4; break;
    case 5: background_index[0] = bg_5; break;
    case 6: background_index[0] = bg_6; break;
    default: background_index[0] = bg_sky; break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Level failed check
left = scr_count_colors(across,size);
/* Double check if any posible matches remain */
if(left+1 &lt; 4 || instance_number(obj_items) == 3 ){
  if(scr_check_playfield(across,down,size) == 0 &amp;&amp; global.moving == 0){
    if(left &lt; 3) {
      scr_level_failed("Kalanlar Eslesemez"); 
    }else{
      scr_level_failed("Hareketin kalmadi.");
    }
    exit;
  }
}
global.setup = true;
finished = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Level complete code
extra = 0;
if(global.moves &lt; total_items){ extra = (total_items-global.moves)*10;}
// add level score to score and reset level score
score += global.level_score+(floor(health*10))+extra;
global.level_score = 0;
audio_sound_gain(snd_level1,0.5,1000);
txt = "";
// Award an extra life every 3 levels
if(global.level mod(3) == 0){
  lives += 1;
  txt = "ekstra Can Kazandin";
}
with (instance_create(0,0,obj_lvl_over)){
  msg_txt = "Seviye Atladin!#Seviye "+string(global.level)+" Tamamlandi##";
  msg_txt += scr_add_commas(global.level*200)+" Seviye bonusu#"
  msg_txt += scr_add_commas(other.extra)+" Hareket bonusu#"
  msg_txt += scr_add_commas(other.extra+(global.level*500))+" Toplam Bonus #"+other.txt;
  if (global.level==global.levelreached) global.levelreached++;
  target_room = ad_room; // splash screen
  failed = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Music control
audio_stop_sound(snd_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check Playfield
// Fetch number of 3 in a line matches
matches = scr_check_playfield(across,down,size);
if(matches &gt; 0){
  global.bonus = 0;
  if(!instance_exists(obj_message)){
    // Select a sound effect to play
    scr_make_noise();
    if(matches &gt; 1){
      // Combo Bonus Award - you could create an object effect here
      audio_play_sound(snd_wacky_blast,0,false);
      timer += matches*10*3;
      global.level_score += matches*10;
      if(instance_exists(global.clicked)){
        effect_create_above(ef_star,global.clicked.x,global.clicked.y,2,c_yellow)
      }else{
        effect_create_above(ef_star,mouse_x,mouse_y,2,c_yellow)
      }
    }
    alarm[0] = 1;
    global.clicked = noone;
  }
  with (obj_items){
    if(matched &gt; 2){
      // Destroy all items with a matched count greater than 2
      instance_destroy();
      if(global.setup){global.bonus+=1;}
    }
    matched = 0; // reset all others
  }
  if(global.setup) {
    global.level_score += matches+1+global.bonus;
    timer += (matches+1+global.bonus)*3;
  }
}

/*
   Initial setup complete
*/
if(matches == 0 &amp;&amp; instance_exists(obj_message)){
  with (obj_message){
    if(done == 2){done = 3;}
  }
  with (obj_items) {visible = true;}
  global.setup = 1;
}

/*
   Check minimum of a color left
*/
if(global.setup &amp;&amp; global.moving == 0){
  // left = script8(across,size);
  left = scr_count_colors(across,size);
  if(left == 0){
    if(instance_number(obj_items) == 0){
      finished = true;
      alarm[2] = 30; // signal level complete
      global.setup = false;
    }
    exit;
  }
  if(left &lt; 3  || instance_number(obj_items) == 3){
    if(matches == 0){
      // if(instance_number(obj_items) == 3 &amp;&amp; scr_check_playfield(across,down,size) == 0){
      // No moves left
      finished = true;
      alarm[3] = 30; // signal level failed
      global.setup = false;
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Level controller
if(finished) {exit;}
// Timer code
if(!instance_exists(obj_message)){
   if(timer &gt; 0){
    timer -= 1;  // decrease timer
  }else{
    // Level failed
    scr_level_failed("Zamanin Kalmadi");
    }
  }

/*
  Check if any items are moving. global.moving &gt; 0 prevents 
  match checking whilst any item is still moving
*/
global.moving = 0;
with(obj_items){
  if(abs(speed) &gt; 0 ){ global.moving = speed;}
}

/////////////////////////////////////////////////////////
// Perform match cheking in 5 steps time if we are setup
// or on the next step if still "building" the playfield
/////////////////////////////////////////////////////////
if(global.setup){
  if(alarm[0] == -1 &amp;&amp; global.moving == 0){
    alarm[0] = 5;
  }
}else{
   // If not set up yet check for matches to ensure
   // there are no 3 in a line matches to start.
  if(!finished &amp;&amp; instance_number(obj_items) == across*down &amp;&amp; global.moving == 0){
    alarm[0] = 1;
  }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HUD (Heards up display)
// Displays player info to the screen
draw_set_font(fnt_Arial11);
switch (global.level){
    case 1: draw_set_color(c_yellow); break;
    case 2: draw_set_color(c_orange); break;
    case 3: draw_set_color(c_silver); break;
    case 4: draw_set_color(c_navy); break;
    case 5: draw_set_color(c_black); break;
    default: draw_set_color(c_orange); break;
}
draw_set_halign(fa_center);

/* Display item types left to match (Top Area) */
px = 55;
py = 90;
for(i=global.item_min; i&lt;=global.item_max; i+=1){
  draw_sprite_ext(sprite_index,i,px,py,0.4,0.4,0,c_white,1);
  draw_text(px+3,py+14,string(global.item[i])+" ");
  py += 55;
}

/* Display score and current level (Top area) */
draw_set_font(fnt_verdana14);
switch (global.level){
    case 1: draw_set_color(c_yellow); break;
    case 2: draw_set_color(c_orange); break;
    case 3: draw_set_color(c_silver); break;
    case 4: draw_set_color(c_navy); break;
    case 5: draw_set_color(c_black); break;
    default: draw_set_color(c_orange); break;
}
draw_set_halign(fa_left);
px = 824;
py = 55;
draw_text(px,py-8,"Puan: "+scr_add_commas(score+global.level_score));
draw_text(px,py-38,"Seviye "+string(global.level));

/* Display lives up to 5 max. (Right area) */
yy = 584;
xx = 120;
draw_text(xx-24,yy,"Canlar"); // draw_text(880,yy-48,"Lives");
life_max = min(5,lives);
for(i=0; i&lt;life_max; i+=1){
  xx += 64;
  draw_sprite(spr_lives,0,xx,yy+16); // draw_sprite(spr_lives,0,906,yy);
}
draw_healthbar(880,100,900,470,(timer/time_max)*100,c_black,c_red,c_lime,3,false,true);
draw_text(860,475,"Zaman");
draw_set_font(fnt_Arial11);
/*
   Testing variables - Only shown if CEATMODE constant = 1 
            Delete this section prior to release           
*/
if(CHEATMODE == 1){
  draw_set_font(fnt_Arial11);
  draw_set_color(c_black);
  draw_set_halign(fa_left);
  draw_text(230,560,"( FPS: "+string(fps)+"/"+string(room_speed));
  draw_text(360,560,"Items: "+string(instance_number(obj_items)));
  draw_text(460,560,"Moves: "+string(global.moves)+" / "+string(total_items));
  draw_text(630,560,"Left: "+string(left)+" )");
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="120">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Screenshots
if(CHEATMODE == 0){exit;}

screen = 1;
loop = true;
fname = working_directory+"/screen0"+string(screen)+".png";
while (loop){
  if(file_exists(working_directory+"/screen0"+string(screen)+".png")){
    screen += 1;
  }else{
    loop = false;
  }
}
screen_save(working_directory+"/screen0"+string(screen)+".png");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="8">
      <action>
        <libid>1</libid>
        <id>224</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_another_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>11</kind>
            <room>options_room</room>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,24</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
